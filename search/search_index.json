{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cursor Highlighter \u00b6 A Python script to show a red circle around the mouse cursor on key press. Useful for tutorials, screen sharing, or live presentations. Requirements \u00b6 Python 3.8+ pyautogui keyboard tkinter (usually comes built-in with Python) Installation \u00b6 pip install pyautogui keyboard Features \u00b6 F8 to turn on the highlighter F9 to turn it off ESC to quit the script Non-intrusive notification bar while running Usage \u00b6 python cursor_highlighter.py","title":"Home"},{"location":"#cursor-highlighter","text":"A Python script to show a red circle around the mouse cursor on key press. Useful for tutorials, screen sharing, or live presentations.","title":"Cursor Highlighter"},{"location":"#requirements","text":"Python 3.8+ pyautogui keyboard tkinter (usually comes built-in with Python)","title":"Requirements"},{"location":"#installation","text":"pip install pyautogui keyboard","title":"Installation"},{"location":"#features","text":"F8 to turn on the highlighter F9 to turn it off ESC to quit the script Non-intrusive notification bar while running","title":"Features"},{"location":"#usage","text":"python cursor_highlighter.py","title":"Usage"},{"location":"reference/","text":"API Reference \u00b6 cursor_highlighter.py A script to highlight the mouse cursor with a red circle using hotkeys. CursorHighlighter \u00b6 A class to visually highlight the mouse cursor using a red circle overlay. Methods: - start(): Enable the overlay and follow the mouse - stop(): Disable the overlay - show_status_window(): Display a notification window with usage instructions - hide_status_window(): Close the notification window Source code in cursor_highlighter.py class CursorHighlighter: \"\"\" A class to visually highlight the mouse cursor using a red circle overlay. Methods: - start(): Enable the overlay and follow the mouse - stop(): Disable the overlay - show_status_window(): Display a notification window with usage instructions - hide_status_window(): Close the notification window \"\"\" def __init__(self): \"\"\"Initialize state and placeholders for GUI and threading.\"\"\" self.running = False # Whether the highlighter is currently active self.root = None # Tkinter root window self.canvas = None # Canvas inside the Tkinter window self.thread = None # Thread running the highlight loop self.status_root = None # Status window with usage info def show_status_window(self): \"\"\" Create a small, always-on-top status window with usage instructions. Styled like old-school developer tools for visual feedback. \"\"\" self.status_root = tk.Toplevel() self.status_root.overrideredirect(True) self.status_root.attributes(\"-topmost\", True) self.status_root.configure(bg=\"#000080\") # Dark blue, classic frame = tk.Frame(self.status_root, bg=\"#000080\", bd=2, relief=\"ridge\") frame.pack() label = tk.Label( frame, text=\"\u2705 Ready. Press F8 to turn ON, F9 to turn OFF, ESC to quit.\", bg=\"#000080\", fg=\"yellow\", # Or cyan for Borland C-style font=(\"Courier New\", 8, \"bold\"), # Monospace justify=\"left\" ) label.pack(ipadx=6, ipady=3) # Position window screen_width = self.status_root.winfo_screenwidth() screen_height = self.status_root.winfo_screenheight() self.status_root.geometry(f\"+{screen_width - 850}+{screen_height - 65}\") def hide_status_window(self): \"\"\"Close the status window if it exists.\"\"\" if self.status_root: self.status_root.destroy() self.status_root = None def _highlight_loop(self): \"\"\" Internal method: Runs in a separate thread to draw a red circle that follows the mouse cursor in real-time. \"\"\" # Create transparent, borderless topmost window self.root = tk.Tk() self.root.attributes(\"-topmost\", True) # Always on top self.root.overrideredirect(True) # No window decorations self.root.wm_attributes(\"-transparentcolor\", \"white\") # Make white color fully transparent self.root.configure(bg=\"white\") # Set background to transparent marker # Draw a red circle on a white canvas (white will be transparent) self.canvas = tk.Canvas(self.root, width=100, height=100, bg=\"white\", highlightthickness=0) self.canvas.pack() self.canvas.create_oval(10, 10, 90, 90, outline=\"red\", width=4) # Loop while the highlighter is active while self.running: x, y = pyautogui.position() self.root.geometry(f\"100x100+{x - 50}+{y - 50}\") self.root.update() time.sleep(0.01) # Cleanup after stopping self.root.destroy() self.root = None self.canvas = None def start(self): \"\"\"Start the red circle overlay by launching the highlight loop in a new thread.\"\"\" if not self.running: print(\"\ud83d\udd34 Highlighter ON (press F9 to turn OFF)\") self.running = True self.thread = threading.Thread(target=self._highlight_loop, daemon=True) self.thread.start() def stop(self): \"\"\"Stop the overlay and wait for the background thread to finish.\"\"\" if self.running: print(\"\u26aa Highlighter OFF (press F8 to turn ON)\") self.running = False if self.thread: self.thread.join() self.thread = None __init__() \u00b6 Initialize state and placeholders for GUI and threading. Source code in cursor_highlighter.py def __init__(self): \"\"\"Initialize state and placeholders for GUI and threading.\"\"\" self.running = False # Whether the highlighter is currently active self.root = None # Tkinter root window self.canvas = None # Canvas inside the Tkinter window self.thread = None # Thread running the highlight loop self.status_root = None # Status window with usage info hide_status_window() \u00b6 Close the status window if it exists. Source code in cursor_highlighter.py def hide_status_window(self): \"\"\"Close the status window if it exists.\"\"\" if self.status_root: self.status_root.destroy() self.status_root = None show_status_window() \u00b6 Create a small, always-on-top status window with usage instructions. Styled like old-school developer tools for visual feedback. Source code in cursor_highlighter.py def show_status_window(self): \"\"\" Create a small, always-on-top status window with usage instructions. Styled like old-school developer tools for visual feedback. \"\"\" self.status_root = tk.Toplevel() self.status_root.overrideredirect(True) self.status_root.attributes(\"-topmost\", True) self.status_root.configure(bg=\"#000080\") # Dark blue, classic frame = tk.Frame(self.status_root, bg=\"#000080\", bd=2, relief=\"ridge\") frame.pack() label = tk.Label( frame, text=\"\u2705 Ready. Press F8 to turn ON, F9 to turn OFF, ESC to quit.\", bg=\"#000080\", fg=\"yellow\", # Or cyan for Borland C-style font=(\"Courier New\", 8, \"bold\"), # Monospace justify=\"left\" ) label.pack(ipadx=6, ipady=3) # Position window screen_width = self.status_root.winfo_screenwidth() screen_height = self.status_root.winfo_screenheight() self.status_root.geometry(f\"+{screen_width - 850}+{screen_height - 65}\") start() \u00b6 Start the red circle overlay by launching the highlight loop in a new thread. Source code in cursor_highlighter.py def start(self): \"\"\"Start the red circle overlay by launching the highlight loop in a new thread.\"\"\" if not self.running: print(\"\ud83d\udd34 Highlighter ON (press F9 to turn OFF)\") self.running = True self.thread = threading.Thread(target=self._highlight_loop, daemon=True) self.thread.start() stop() \u00b6 Stop the overlay and wait for the background thread to finish. Source code in cursor_highlighter.py def stop(self): \"\"\"Stop the overlay and wait for the background thread to finish.\"\"\" if self.running: print(\"\u26aa Highlighter OFF (press F8 to turn ON)\") self.running = False if self.thread: self.thread.join() self.thread = None","title":"Reference"},{"location":"reference/#api-reference","text":"cursor_highlighter.py A script to highlight the mouse cursor with a red circle using hotkeys.","title":"API Reference"},{"location":"reference/#cursor_highlighter.CursorHighlighter","text":"A class to visually highlight the mouse cursor using a red circle overlay. Methods: - start(): Enable the overlay and follow the mouse - stop(): Disable the overlay - show_status_window(): Display a notification window with usage instructions - hide_status_window(): Close the notification window Source code in cursor_highlighter.py class CursorHighlighter: \"\"\" A class to visually highlight the mouse cursor using a red circle overlay. Methods: - start(): Enable the overlay and follow the mouse - stop(): Disable the overlay - show_status_window(): Display a notification window with usage instructions - hide_status_window(): Close the notification window \"\"\" def __init__(self): \"\"\"Initialize state and placeholders for GUI and threading.\"\"\" self.running = False # Whether the highlighter is currently active self.root = None # Tkinter root window self.canvas = None # Canvas inside the Tkinter window self.thread = None # Thread running the highlight loop self.status_root = None # Status window with usage info def show_status_window(self): \"\"\" Create a small, always-on-top status window with usage instructions. Styled like old-school developer tools for visual feedback. \"\"\" self.status_root = tk.Toplevel() self.status_root.overrideredirect(True) self.status_root.attributes(\"-topmost\", True) self.status_root.configure(bg=\"#000080\") # Dark blue, classic frame = tk.Frame(self.status_root, bg=\"#000080\", bd=2, relief=\"ridge\") frame.pack() label = tk.Label( frame, text=\"\u2705 Ready. Press F8 to turn ON, F9 to turn OFF, ESC to quit.\", bg=\"#000080\", fg=\"yellow\", # Or cyan for Borland C-style font=(\"Courier New\", 8, \"bold\"), # Monospace justify=\"left\" ) label.pack(ipadx=6, ipady=3) # Position window screen_width = self.status_root.winfo_screenwidth() screen_height = self.status_root.winfo_screenheight() self.status_root.geometry(f\"+{screen_width - 850}+{screen_height - 65}\") def hide_status_window(self): \"\"\"Close the status window if it exists.\"\"\" if self.status_root: self.status_root.destroy() self.status_root = None def _highlight_loop(self): \"\"\" Internal method: Runs in a separate thread to draw a red circle that follows the mouse cursor in real-time. \"\"\" # Create transparent, borderless topmost window self.root = tk.Tk() self.root.attributes(\"-topmost\", True) # Always on top self.root.overrideredirect(True) # No window decorations self.root.wm_attributes(\"-transparentcolor\", \"white\") # Make white color fully transparent self.root.configure(bg=\"white\") # Set background to transparent marker # Draw a red circle on a white canvas (white will be transparent) self.canvas = tk.Canvas(self.root, width=100, height=100, bg=\"white\", highlightthickness=0) self.canvas.pack() self.canvas.create_oval(10, 10, 90, 90, outline=\"red\", width=4) # Loop while the highlighter is active while self.running: x, y = pyautogui.position() self.root.geometry(f\"100x100+{x - 50}+{y - 50}\") self.root.update() time.sleep(0.01) # Cleanup after stopping self.root.destroy() self.root = None self.canvas = None def start(self): \"\"\"Start the red circle overlay by launching the highlight loop in a new thread.\"\"\" if not self.running: print(\"\ud83d\udd34 Highlighter ON (press F9 to turn OFF)\") self.running = True self.thread = threading.Thread(target=self._highlight_loop, daemon=True) self.thread.start() def stop(self): \"\"\"Stop the overlay and wait for the background thread to finish.\"\"\" if self.running: print(\"\u26aa Highlighter OFF (press F8 to turn ON)\") self.running = False if self.thread: self.thread.join() self.thread = None","title":"CursorHighlighter"},{"location":"reference/#cursor_highlighter.CursorHighlighter.__init__","text":"Initialize state and placeholders for GUI and threading. Source code in cursor_highlighter.py def __init__(self): \"\"\"Initialize state and placeholders for GUI and threading.\"\"\" self.running = False # Whether the highlighter is currently active self.root = None # Tkinter root window self.canvas = None # Canvas inside the Tkinter window self.thread = None # Thread running the highlight loop self.status_root = None # Status window with usage info","title":"__init__"},{"location":"reference/#cursor_highlighter.CursorHighlighter.hide_status_window","text":"Close the status window if it exists. Source code in cursor_highlighter.py def hide_status_window(self): \"\"\"Close the status window if it exists.\"\"\" if self.status_root: self.status_root.destroy() self.status_root = None","title":"hide_status_window"},{"location":"reference/#cursor_highlighter.CursorHighlighter.show_status_window","text":"Create a small, always-on-top status window with usage instructions. Styled like old-school developer tools for visual feedback. Source code in cursor_highlighter.py def show_status_window(self): \"\"\" Create a small, always-on-top status window with usage instructions. Styled like old-school developer tools for visual feedback. \"\"\" self.status_root = tk.Toplevel() self.status_root.overrideredirect(True) self.status_root.attributes(\"-topmost\", True) self.status_root.configure(bg=\"#000080\") # Dark blue, classic frame = tk.Frame(self.status_root, bg=\"#000080\", bd=2, relief=\"ridge\") frame.pack() label = tk.Label( frame, text=\"\u2705 Ready. Press F8 to turn ON, F9 to turn OFF, ESC to quit.\", bg=\"#000080\", fg=\"yellow\", # Or cyan for Borland C-style font=(\"Courier New\", 8, \"bold\"), # Monospace justify=\"left\" ) label.pack(ipadx=6, ipady=3) # Position window screen_width = self.status_root.winfo_screenwidth() screen_height = self.status_root.winfo_screenheight() self.status_root.geometry(f\"+{screen_width - 850}+{screen_height - 65}\")","title":"show_status_window"},{"location":"reference/#cursor_highlighter.CursorHighlighter.start","text":"Start the red circle overlay by launching the highlight loop in a new thread. Source code in cursor_highlighter.py def start(self): \"\"\"Start the red circle overlay by launching the highlight loop in a new thread.\"\"\" if not self.running: print(\"\ud83d\udd34 Highlighter ON (press F9 to turn OFF)\") self.running = True self.thread = threading.Thread(target=self._highlight_loop, daemon=True) self.thread.start()","title":"start"},{"location":"reference/#cursor_highlighter.CursorHighlighter.stop","text":"Stop the overlay and wait for the background thread to finish. Source code in cursor_highlighter.py def stop(self): \"\"\"Stop the overlay and wait for the background thread to finish.\"\"\" if self.running: print(\"\u26aa Highlighter OFF (press F8 to turn ON)\") self.running = False if self.thread: self.thread.join() self.thread = None","title":"stop"}]}